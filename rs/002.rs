/*
 *  Even Fibonacci numbers
 *  ======================
 *  Each new term in the Fibonacci sequence is generated by adding the previous
 *  two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 *  By considering the terms in the Fibonacci sequence whose values do not exceed
 *  four million, find the sum of the even-valued terms.
 */

trait NumberTheory {
  fn divides(&self, n: u32) -> bool;
}

impl NumberTheory for u32 {
  fn divides(&self, n: u32) -> bool { n % *self == 0 }
}


fn main() {
  // Try not to be too much of an idiot about the implementation. On the other
  // hand, make sure to have horrible control flow.
  let mut fibs: Vec<u32> = vec![1, 2, 3, 5, 8, 13, 21, 34, 55, 89];

  loop {
    let next_fib: u32;

    {
      let slice = &fibs[(fibs.len() - 2)..];
      next_fib = slice.iter().fold(0, |sum, n| sum + n);
    }
    
    if next_fib > 4000000 {
      break;
    }
    
    fibs.push(next_fib);
  }

  // Just the even ones...
  let even_fibs = fibs.iter().filter(|n: &&u32| 2.divides(**n));

  let answer: u32 = even_fibs.fold(0, |sum, n| sum + n);
  println!("{}", answer);
}
