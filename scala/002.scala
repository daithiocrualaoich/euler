/*
 * Even Fibonacci numbers
 * ======================
 * Each new term in the Fibonacci sequence is generated by adding the previous two
 * terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */

def divides(n: Int, d: Int): Boolean = n % d == 0

// Try not to be too much of an idiot about the implementation. On the other
// hand, make sure to have horrible control flow.

val fibs: Iterator[Int] = Iterator(1, 2) ++ new Iterator[Int] {
  override def hasNext: Boolean = true

  var recent: List[Int] = List(2, 1)
  override def next(): Int = {
    val next = recent.sum
    recent = List(next, recent.head)
    next
  }
}

// Just the small even ones...
val evenFibs = fibs takeWhile { _ <= 4000000 } filter { n => divides(n, 2) }

val answer = evenFibs.sum
println(answer)
