/*
 * Even Fibonacci Numbers
 * ======================
 * Each new term in the Fibonacci sequence is generated by adding the previous two
 * terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */

implicit class Int2Divides(d: Int) {
  def divides(n: Int): Boolean = n % d == 0
}

implicit class Int2IsEven(n: Int) {
  lazy val isEven: Boolean = 2 divides n
}

val fibs: Iterator[Int] = Iterator(1, 2) ++ new Iterator[Int] {
  override def hasNext: Boolean = true

  var recent: List[Int] = List(2, 1)
  override def next(): Int = {
    val next = recent.sum
    recent = List(next, recent.head)
    next
  }
}

// Just the small even ones...
val evenFibs = fibs takeWhile { _ <= 4_000_000 } filter { _.isEven }

val answer = evenFibs.sum // = 4,613,732
println(answer)
